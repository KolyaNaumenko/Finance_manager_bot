
from datetime import datetime, timedelta
from database.database import get_transactions_by_period,set_budget, save_transaction, get_budget, get_total_expenses
from telegram import Update
from telegram.ext import ContextTypes


async def summary(update, context):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç (–ø–µ—Ä—ñ–æ–¥)
        args = context.args
        if not args:
            await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /summary <day|week|month|all>")
            return

        period = args[0].lower()
        user_id = update.message.from_user.id

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞—Ç –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        today = datetime.now()
        if period == "day":
            start_date = today.replace(hour=0, minute=0, second=0, microsecond=0)
        elif period == "week":
            start_date = today - timedelta(days=today.weekday())
        elif period == "month":
            start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        elif period == "all":
            start_date = None  # –£—Å—ñ –¥–∞–Ω—ñ
        else:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–µ—Ä—ñ–æ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: day, week, month –∞–±–æ all.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏
        transactions = get_transactions_by_period(user_id, start_date)

        if not transactions:
            await update.message.reply_text("–ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
            return

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É
        total_income = 0
        total_expense = 0
        result = "üìä <b>–ó–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥:</b>\n"

        for t in transactions:
            amount = t['amount']
            category = t['category']
            t_type = t['type']
            date = t['date']

            if t_type == 'income':
                total_income += amount
                t_type_display = "‚ûï –î–æ—Ö—ñ–¥"
            else:
                total_expense += amount
                t_type_display = "‚ûñ –í–∏—Ç—Ä–∞—Ç–∞"

            result += f"{date}: {t_type_display} {amount} ({category})\n"

        result += f"\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b>\n"
        result += f"–î–æ—Ö—ñ–¥: {total_income}\n"
        result += f"–í–∏—Ç—Ä–∞—Ç–∏: {total_expense}\n"

        await update.message.reply_text(result, parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")


async def set_budget_handler(update, context):
    user_id = update.message.from_user.id
    try:
        budget = float(context.args[0])
        set_budget(user_id, budget)

        total_expenses = get_total_expenses(user_id)
        response = f"‚úÖ –ë—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {budget}"
        if total_expenses > budget:
            response += f"\n‚ö†Ô∏è –£–≤–∞–≥–∞! –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ ({total_expenses:.2f}) –≤–∂–µ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç!"

        await update.message.reply_text(response)
    except (IndexError, ValueError):
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É: /set_budget <—Å—É–º–∞>")


async def compare(update, context):
    user_id = update.message.from_user.id
    try:
        period1 = context.args[0]
        period2 = context.args[1]

        def get_period_dates(period):
            today = datetime.now()
            if period == "day":
                return today.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d')
            elif period == "week":
                start_date = (today - timedelta(days=7)).strftime('%Y-%m-%d')
                return start_date, today.strftime('%Y-%m-%d')
            elif period == "month":
                start_date = (today - timedelta(days=30)).strftime('%Y-%m-%d')
                return start_date, today.strftime('%Y-%m-%d')
            else:
                raise ValueError("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥.")

        start_date1, end_date1 = get_period_dates(period1)
        start_date2, end_date2 = get_period_dates(period2)

        transactions1 = get_transactions_by_period(user_id, start_date1, end_date1)
        transactions2 = get_transactions_by_period(user_id, start_date2, end_date2)

        def calculate_totals(transactions):
            income, expenses = 0, 0
            for t_type, _, amount in transactions:
                if t_type == "income":
                    income += amount
                elif t_type == "expense":
                    expenses += amount
            return income, expenses

        income1, expenses1 = calculate_totals(transactions1)
        income2, expenses2 = calculate_totals(transactions2)

        report = f"üìä **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:**\n\n"
        report += f"–ü–µ—Ä—ñ–æ–¥ 1: {start_date1} - {end_date1}\n"
        report += f"  - –î–æ—Ö–æ–¥–∏: {income1}\n"
        report += f"  - –í–∏—Ç—Ä–∞—Ç–∏: {expenses1}\n\n"
        report += f"–ü–µ—Ä—ñ–æ–¥ 2: {start_date2} - {end_date2}\n"
        report += f"  - –î–æ—Ö–æ–¥–∏: {income2}\n"
        report += f"  - –í–∏—Ç—Ä–∞—Ç–∏: {expenses2}\n"

        await update.message.reply_text(report, parse_mode="Markdown")
    except (IndexError, ValueError):
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /compare <–ø–µ—Ä—ñ–æ–¥1> <–ø–µ—Ä—ñ–æ–¥2> (day/week/month)")

async def add_expense(update, context):
    user_id = update.message.from_user.id
    try:
        amount = float(context.args[0])
        category = " ".join(context.args[1:])
        if not category:
            raise ValueError("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞.")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        save_transaction(user_id, "expense", category, amount)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—é–¥–∂–µ—Ç—É
        budget = get_budget(user_id)
        total_expenses = get_total_expenses(user_id)

        response = f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞: {amount} ({category})"
        if budget > 0:
            remaining_budget = budget - total_expenses
            if remaining_budget <= 0:
                response += f"\n‚ö†Ô∏è –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç –Ω–∞ {abs(remaining_budget):.2f}!"
            elif remaining_budget <= budget * 0.25:
                response += f"\n‚ö†Ô∏è –£–≤–∞–≥–∞! –í–∏ –Ω–∞–±–ª–∏–∂–∞—î—Ç–µ—Å—è –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remaining_budget:.2f}"

        await update.message.reply_text(response)
    except (IndexError, ValueError):
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_expense <—Å—É–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è>")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
1. <b>/add_income [—Å—É–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä—ñ—è]</b> ‚Äî –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥. 
   –ü—Ä–∏–∫–ª–∞–¥: <code>/add_income 1000 –ó–∞—Ä–ø–ª–∞—Ç–∞</code>
2. <b>/add_expense [—Å—É–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä—ñ—è]</b> ‚Äî –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/add_expense 500 –ü—Ä–æ–¥—É–∫—Ç–∏</code>
3. <b>/balance</b> ‚Äî –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å.
4. <b>/summary [–ø–µ—Ä—ñ–æ–¥]</b> ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/summary —Ç–∏–∂–¥–µ–Ω—å</code>
5. <b>/set_currency [–≤–∞–ª—é—Ç–∞]</b> ‚Äî –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–∞–ª—é—Ç—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/set_currency USD</code>
6. <b>/set_categories [—Ç–∏–ø] [–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó]</b> ‚Äî –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –∞–±–æ –≤–∏—Ç—Ä–∞—Ç.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/set_categories income –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó</code>
7. <b>/add_recurring_payment [—Å—É–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä—ñ—è] [—Ç–∏–ø] [–ø–µ—Ä—ñ–æ–¥]</b> ‚Äî –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –ø–ª–∞—Ç—ñ–∂.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/add_recurring_payment 100 –ü—Ä–æ–¥—É–∫—Ç–∏ expense 30</code>
8. <b>/set_goal [—Å—É–º–∞] [–¥–∞—Ç–∞] [–æ–ø–∏—Å]</b> ‚Äî –î–æ–¥–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —Ü—ñ–ª—å.
   –ü—Ä–∏–∫–ª–∞–¥: <code>/set_goal 5000 2024-12-31 –ö—É–ø—ñ–≤–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞</code>
9. <b>/track_goal</b> ‚Äî –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ–≥—Ä–µ—Å—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ü—ñ–ª–µ–π.
10. <b>/forecast</b> ‚Äî –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.
11. <b>/help</b> ‚Äî –ü–µ—Ä–µ–ª—ñ–∫ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ —ñ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º.

<b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>
- –ö–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ –≤ –±—É–¥—å-—è–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É.
- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
- –ü–µ—Ä—ñ–æ–¥–∏ —É –∫–æ–º–∞–Ω–¥–∞—Ö: <code>–¥–µ–Ω—å</code>, <code>—Ç–∏–∂–¥–µ–Ω—å</code>, <code>–º—ñ—Å—è—Ü—å</code>.
"""
    await update.message.reply_text(help_text, parse_mode='HTML')